img = imread('square.jpg');
double_img = double(img);
imgRed= double_img(:,:,1); 
imgGreen = double_img(:,:,2);
imgBlue = double_img(:,:,3);

%Compressing the red channel
imRedComp = sReturn(imgRed)*imgRed*sReturn(imgRed);
p=0.5;
% when p=0, no data are saved
% when p=1, all data are saved
for i = 1:n
    for j = 1:n
        if (i+j > p*2*n)
            imRedComp(i,j) = 0;
        end
    end
end







function [s] = sReturn(matr)
%since in this project the matrices are guaranteed to be square (nxn), I
%can get the size of just one dimension.
n = size(matr, 1);
%I preallocate the memory here to have an nxn matrix because this is faster
%than reallocating the memory each time I add an element to the array
s = zeros(1, n);
mult = sqrt(2/n);
for i = 1:n
    for j = 1:n
        s(i,j) = mult*sin((pi/n)*(i-.5)*(j-.5));
    end
end

end